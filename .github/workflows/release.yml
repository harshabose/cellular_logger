name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # Linux AMD64 build
  build-linux-amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get dependencies
        run: go mod download

      - name: Build Linux AMD64
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        run: |
          mkdir -p build
          go build -ldflags="-s -w" -o build/cellular_logger-linux-amd64 cmd/log/main.go

      - name: Upload Linux AMD64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: cellular_logger-linux-amd64
          path: build/cellular_logger-linux-amd64

  # Linux ARM64 build
  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install ARM64 cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Get dependencies
        run: go mod download

      - name: Build Linux ARM64
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
        run: |
          mkdir -p build
          go build -ldflags="-s -w" -o build/cellular_logger-linux-arm64 cmd/log/main.go

      - name: Upload Linux ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: cellular_logger-linux-arm64
          path: build/cellular_logger-linux-arm64

  # Linux ARM build
  build-linux-arm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install ARM cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf

      - name: Get dependencies
        run: go mod download

      - name: Build Linux ARM
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: arm
          CC: arm-linux-gnueabihf-gcc
        run: |
          mkdir -p build
          go build -ldflags="-s -w" -o build/cellular_logger-linux-arm cmd/log/main.go

      - name: Upload Linux ARM artifact
        uses: actions/upload-artifact@v4
        with:
          name: cellular_logger-linux-arm
          path: build/cellular_logger-linux-arm

  # macOS AMD64 build
  build-darwin-amd64:
    runs-on: macos-13  # Intel-based macOS runner
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get dependencies
        run: go mod download

      - name: Build macOS AMD64
        env:
          CGO_ENABLED: 1
          GOOS: darwin
          GOARCH: amd64
        run: |
          mkdir -p build
          go build -ldflags="-s -w" -o build/cellular_logger-darwin-amd64 cmd/log/main.go

      - name: Upload macOS AMD64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: cellular_logger-darwin-amd64
          path: build/cellular_logger-darwin-amd64

  # macOS ARM64 build (Apple Silicon)
  build-darwin-arm64:
    runs-on: macos-latest  # ARM-based macOS runner
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get dependencies
        run: go mod download

      - name: Build macOS ARM64
        env:
          CGO_ENABLED: 1
          GOOS: darwin
          GOARCH: arm64
        run: |
          mkdir -p build
          go build -ldflags="-s -w" -o build/cellular_logger-darwin-arm64 cmd/log/main.go

      - name: Upload macOS ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: cellular_logger-darwin-arm64
          path: build/cellular_logger-darwin-arm64

  # Windows AMD64 build
  build-windows-amd64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get dependencies
        run: go mod download

      - name: Build Windows AMD64
        env:
          CGO_ENABLED: 1
          GOOS: windows
          GOARCH: amd64
        run: |
          mkdir build
          go build -ldflags="-s -w" -o build/cellular_logger-windows-amd64.exe cmd/log/main.go

      - name: Upload Windows AMD64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: cellular_logger-windows-amd64.exe
          path: build/cellular_logger-windows-amd64.exe

  # Windows ARM64 build
  build-windows-arm64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get dependencies
        run: go mod download

      - name: Build Windows ARM64
        env:
          CGO_ENABLED: 1
          GOOS: windows
          GOARCH: arm64
        run: |
          mkdir build
          go build -ldflags="-s -w" -o build/cellular_logger-windows-arm64.exe cmd/log/main.go

      - name: Upload Windows ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: cellular_logger-windows-arm64.exe
          path: build/cellular_logger-windows-arm64.exe

  # Create release with all artifacts
  create-release:
    needs: [
      build-linux-amd64,
      build-linux-arm64,
      build-linux-arm,
      build-darwin-amd64,
      build-darwin-arm64,
      build-windows-amd64,
      build-windows-arm64
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f -name "cellular_logger-*" -exec cp {} release/ \;
          ls -la release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
          body: |
            ## Release Notes
            
            ### Supported Platforms:
            - **Linux**: AMD64, ARM64, ARM (32-bit)
            - **macOS**: Intel (AMD64), Apple Silicon (ARM64)
            - **Windows**: AMD64, ARM64
            
            ### Installation:
            Download the appropriate binary for your platform and make it executable:
            
            ```bash
            # Linux/macOS
            chmod +x cellular_logger-*
            ./cellular_logger-* --help
            
            # Windows
            cellular_logger-*.exe --help
            ```
            
            ### Requirements:
            - Serial port access permissions
            - MAVLink-compatible device (optional)
            - Cellular modem with AT command support (optional)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}