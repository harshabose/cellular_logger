//autogenerated:yes
package mavlink

import (
	"context"
	"fmt"

	"github.com/bluenviron/gomavlib/v3/pkg/dialects/all"

	"github.com/harshabose/cellular_localisation_logging"
)

var mavlinkRegistry = map[string]func(context.Context) cellularlog.Message{
	"ACTUATOR_CONTROL_TARGET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageActuatorControlTarget](ctx)
	},
	"ACTUATOR_OUTPUT_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageActuatorOutputStatus](ctx)
	},
	"ADAP_TUNING": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAdapTuning](ctx)
	},
	"ADSB_VEHICLE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAdsbVehicle](ctx)
	},
	"AHRS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAhrs](ctx)
	},
	"AHRS2": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAhrs2](ctx)
	},
	"AHRS3": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAhrs3](ctx)
	},
	"AIRLINK_AUTH": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAirlinkAuth](ctx)
	},
	"AIRLINK_AUTH_RESPONSE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAirlinkAuthResponse](ctx)
	},
	"AIRLINK_EYE_GS_HOLE_PUSH_REQUEST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAirlinkEyeGsHolePushRequest](ctx)
	},
	"AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAirlinkEyeGsHolePushResponse](ctx)
	},
	"AIRLINK_EYE_HP": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAirlinkEyeHp](ctx)
	},
	"AIRLINK_EYE_TURN_INIT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAirlinkEyeTurnInit](ctx)
	},
	"AIRSPEED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAirspeed](ctx)
	},
	"AIRSPEED_AUTOCAL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAirspeedAutocal](ctx)
	},
	"AIS_VESSEL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAisVessel](ctx)
	},
	"ALTITUDE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAltitude](ctx)
	},
	"AOA_SSA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAoaSsa](ctx)
	},
	"AP_ADC": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageApAdc](ctx)
	},
	"ARRAY_TEST_0": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageArrayTest_0](ctx)
	},
	"ARRAY_TEST_1": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageArrayTest_1](ctx)
	},
	"ARRAY_TEST_3": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageArrayTest_3](ctx)
	},
	"ARRAY_TEST_4": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageArrayTest_4](ctx)
	},
	"ARRAY_TEST_5": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageArrayTest_5](ctx)
	},
	"ARRAY_TEST_6": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageArrayTest_6](ctx)
	},
	"ARRAY_TEST_7": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageArrayTest_7](ctx)
	},
	"ARRAY_TEST_8": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageArrayTest_8](ctx)
	},
	"ASLCTRL_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAslctrlData](ctx)
	},
	"ASLCTRL_DEBUG": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAslctrlDebug](ctx)
	},
	"ASLUAV_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAsluavStatus](ctx)
	},
	"ASL_OBCTRL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAslObctrl](ctx)
	},
	"ATTITUDE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAttitude](ctx)
	},
	"ATTITUDE_QUATERNION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAttitudeQuaternion](ctx)
	},
	"ATTITUDE_QUATERNION_COV": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAttitudeQuaternionCov](ctx)
	},
	"ATTITUDE_TARGET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAttitudeTarget](ctx)
	},
	"ATT_POS_MOCAP": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAttPosMocap](ctx)
	},
	"AUTH_KEY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAuthKey](ctx)
	},
	"AUTOPILOT_STATE_FOR_GIMBAL_DEVICE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAutopilotStateForGimbalDevice](ctx)
	},
	"AUTOPILOT_VERSION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAutopilotVersion](ctx)
	},
	"AUTOPILOT_VERSION_REQUEST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAutopilotVersionRequest](ctx)
	},
	"AVAILABLE_MODES": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAvailableModes](ctx)
	},
	"AVAILABLE_MODES_MONITOR": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAvailableModesMonitor](ctx)
	},
	"AVSS_DRONE_IMU": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAvssDroneImu](ctx)
	},
	"AVSS_DRONE_OPERATION_MODE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAvssDroneOperationMode](ctx)
	},
	"AVSS_DRONE_POSITION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAvssDronePosition](ctx)
	},
	"AVSS_PRS_SYS_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageAvssPrsSysStatus](ctx)
	},
	"BATTERY2": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageBattery2](ctx)
	},
	"BATTERY_INFO": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageBatteryInfo](ctx)
	},
	"BATTERY_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageBatteryStatus](ctx)
	},
	"BATTERY_STATUS_V2": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageBatteryStatusV2](ctx)
	},
	"BUTTON_CHANGE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageButtonChange](ctx)
	},
	"CAMERA_CAPTURE_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraCaptureStatus](ctx)
	},
	"CAMERA_FEEDBACK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraFeedback](ctx)
	},
	"CAMERA_FOV_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraFovStatus](ctx)
	},
	"CAMERA_IMAGE_CAPTURED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraImageCaptured](ctx)
	},
	"CAMERA_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraInformation](ctx)
	},
	"CAMERA_SETTINGS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraSettings](ctx)
	},
	"CAMERA_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraStatus](ctx)
	},
	"CAMERA_THERMAL_RANGE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraThermalRange](ctx)
	},
	"CAMERA_TRACKING_GEO_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraTrackingGeoStatus](ctx)
	},
	"CAMERA_TRACKING_IMAGE_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraTrackingImageStatus](ctx)
	},
	"CAMERA_TRIGGER": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCameraTrigger](ctx)
	},
	"CANFD_FRAME": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCanfdFrame](ctx)
	},
	"CAN_FILTER_MODIFY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCanFilterModify](ctx)
	},
	"CAN_FRAME": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCanFrame](ctx)
	},
	"CELLULAR_CONFIG": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCellularConfig](ctx)
	},
	"CELLULAR_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCellularStatus](ctx)
	},
	"CHANGE_OPERATOR_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageChangeOperatorControl](ctx)
	},
	"CHANGE_OPERATOR_CONTROL_ACK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageChangeOperatorControlAck](ctx)
	},
	"COLLISION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCollision](ctx)
	},
	"COMMAND_ACK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCommandAck](ctx)
	},
	"COMMAND_CANCEL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCommandCancel](ctx)
	},
	"COMMAND_INT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCommandInt](ctx)
	},
	"COMMAND_INT_STAMPED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCommandIntStamped](ctx)
	},
	"COMMAND_LONG": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCommandLong](ctx)
	},
	"COMMAND_LONG_STAMPED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCommandLongStamped](ctx)
	},
	"COMPASSMOT_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCompassmotStatus](ctx)
	},
	"COMPONENT_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageComponentInformation](ctx)
	},
	"COMPONENT_INFORMATION_BASIC": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageComponentInformationBasic](ctx)
	},
	"COMPONENT_METADATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageComponentMetadata](ctx)
	},
	"CONTROL_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageControlStatus](ctx)
	},
	"CONTROL_SYSTEM_STATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageControlSystemState](ctx)
	},
	"CUBEPILOT_FIRMWARE_UPDATE_RESP": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCubepilotFirmwareUpdateResp](ctx)
	},
	"CUBEPILOT_FIRMWARE_UPDATE_START": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCubepilotFirmwareUpdateStart](ctx)
	},
	"CUBEPILOT_RAW_RC": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCubepilotRawRc](ctx)
	},
	"CURRENT_EVENT_SEQUENCE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCurrentEventSequence](ctx)
	},
	"CURRENT_MODE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageCurrentMode](ctx)
	},
	"DATA16": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageData16](ctx)
	},
	"DATA32": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageData32](ctx)
	},
	"DATA64": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageData64](ctx)
	},
	"DATA96": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageData96](ctx)
	},
	"DATA_STREAM": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDataStream](ctx)
	},
	"DATA_TRANSMISSION_HANDSHAKE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDataTransmissionHandshake](ctx)
	},
	"DEBUG": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDebug](ctx)
	},
	"DEBUG_FLOAT_ARRAY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDebugFloatArray](ctx)
	},
	"DEBUG_VECT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDebugVect](ctx)
	},
	"DEEPSTALL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDeepstall](ctx)
	},
	"DEVICE_OP_READ": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDeviceOpRead](ctx)
	},
	"DEVICE_OP_READ_REPLY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDeviceOpReadReply](ctx)
	},
	"DEVICE_OP_WRITE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDeviceOpWrite](ctx)
	},
	"DEVICE_OP_WRITE_REPLY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDeviceOpWriteReply](ctx)
	},
	"DIGICAM_CONFIGURE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDigicamConfigure](ctx)
	},
	"DIGICAM_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDigicamControl](ctx)
	},
	"DISTANCE_SENSOR": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageDistanceSensor](ctx)
	},
	"EFI_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEfiStatus](ctx)
	},
	"EKF_EXT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEkfExt](ctx)
	},
	"EKF_STATUS_REPORT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEkfStatusReport](ctx)
	},
	"ENCAPSULATED_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEncapsulatedData](ctx)
	},
	"ESC_INFO": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscInfo](ctx)
	},
	"ESC_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscStatus](ctx)
	},
	"ESC_TELEMETRY_13_TO_16": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscTelemetry_13To_16](ctx)
	},
	"ESC_TELEMETRY_17_TO_20": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscTelemetry_17To_20](ctx)
	},
	"ESC_TELEMETRY_1_TO_4": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscTelemetry_1To_4](ctx)
	},
	"ESC_TELEMETRY_21_TO_24": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscTelemetry_21To_24](ctx)
	},
	"ESC_TELEMETRY_25_TO_28": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscTelemetry_25To_28](ctx)
	},
	"ESC_TELEMETRY_29_TO_32": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscTelemetry_29To_32](ctx)
	},
	"ESC_TELEMETRY_5_TO_8": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscTelemetry_5To_8](ctx)
	},
	"ESC_TELEMETRY_9_TO_12": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEscTelemetry_9To_12](ctx)
	},
	"ESTIMATOR_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEstimatorStatus](ctx)
	},
	"EVENT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageEvent](ctx)
	},
	"EXTENDED_SYS_STATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageExtendedSysState](ctx)
	},
	"FENCE_FETCH_POINT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFenceFetchPoint](ctx)
	},
	"FENCE_POINT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFencePoint](ctx)
	},
	"FENCE_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFenceStatus](ctx)
	},
	"FIGURE_EIGHT_EXECUTION_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFigureEightExecutionStatus](ctx)
	},
	"FILE_TRANSFER_PROTOCOL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFileTransferProtocol](ctx)
	},
	"FLIGHT_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFlightInformation](ctx)
	},
	"FOLLOW_TARGET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFollowTarget](ctx)
	},
	"FRSKY_PASSTHROUGH_ARRAY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFrskyPassthroughArray](ctx)
	},
	"FUEL_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFuelStatus](ctx)
	},
	"FW_SOARING_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageFwSoaringData](ctx)
	},
	"GENERATOR_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGeneratorStatus](ctx)
	},
	"GIMBAL_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalControl](ctx)
	},
	"GIMBAL_DEVICE_ATTITUDE_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalDeviceAttitudeStatus](ctx)
	},
	"GIMBAL_DEVICE_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalDeviceInformation](ctx)
	},
	"GIMBAL_DEVICE_SET_ATTITUDE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalDeviceSetAttitude](ctx)
	},
	"GIMBAL_MANAGER_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalManagerInformation](ctx)
	},
	"GIMBAL_MANAGER_SET_ATTITUDE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalManagerSetAttitude](ctx)
	},
	"GIMBAL_MANAGER_SET_MANUAL_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalManagerSetManualControl](ctx)
	},
	"GIMBAL_MANAGER_SET_PITCHYAW": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalManagerSetPitchyaw](ctx)
	},
	"GIMBAL_MANAGER_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalManagerStatus](ctx)
	},
	"GIMBAL_REPORT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalReport](ctx)
	},
	"GIMBAL_TORQUE_CMD_REPORT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGimbalTorqueCmdReport](ctx)
	},
	"GLOBAL_POSITION_INT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGlobalPositionInt](ctx)
	},
	"GLOBAL_POSITION_INT_COV": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGlobalPositionIntCov](ctx)
	},
	"GLOBAL_VISION_POSITION_ESTIMATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGlobalVisionPositionEstimate](ctx)
	},
	"GNSS_INTEGRITY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGnssIntegrity](ctx)
	},
	"GOPRO_GET_REQUEST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGoproGetRequest](ctx)
	},
	"GOPRO_GET_RESPONSE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGoproGetResponse](ctx)
	},
	"GOPRO_HEARTBEAT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGoproHeartbeat](ctx)
	},
	"GOPRO_SET_REQUEST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGoproSetRequest](ctx)
	},
	"GOPRO_SET_RESPONSE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGoproSetResponse](ctx)
	},
	"GPS2_RAW": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGps2Raw](ctx)
	},
	"GPS2_RTK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGps2Rtk](ctx)
	},
	"GPS_GLOBAL_ORIGIN": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGpsGlobalOrigin](ctx)
	},
	"GPS_INJECT_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGpsInjectData](ctx)
	},
	"GPS_INPUT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGpsInput](ctx)
	},
	"GPS_RAW_INT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGpsRawInt](ctx)
	},
	"GPS_RTCM_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGpsRtcmData](ctx)
	},
	"GPS_RTK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGpsRtk](ctx)
	},
	"GPS_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGpsStatus](ctx)
	},
	"GROUP_END": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGroupEnd](ctx)
	},
	"GROUP_START": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGroupStart](ctx)
	},
	"GSM_LINK_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageGsmLinkStatus](ctx)
	},
	"HEARTBEAT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHeartbeat](ctx)
	},
	"HERELINK_TELEM": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHerelinkTelem](ctx)
	},
	"HERELINK_VIDEO_STREAM_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHerelinkVideoStreamInformation](ctx)
	},
	"HIGHRES_IMU": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHighresImu](ctx)
	},
	"HIGH_LATENCY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHighLatency](ctx)
	},
	"HIGH_LATENCY2": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHighLatency2](ctx)
	},
	"HIL_ACTUATOR_CONTROLS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHilActuatorControls](ctx)
	},
	"HIL_CONTROLS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHilControls](ctx)
	},
	"HIL_GPS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHilGps](ctx)
	},
	"HIL_OPTICAL_FLOW": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHilOpticalFlow](ctx)
	},
	"HIL_RC_INPUTS_RAW": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHilRcInputsRaw](ctx)
	},
	"HIL_SENSOR": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHilSensor](ctx)
	},
	"HIL_STATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHilState](ctx)
	},
	"HIL_STATE_QUATERNION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHilStateQuaternion](ctx)
	},
	"HOME_POSITION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHomePosition](ctx)
	},
	"HWSTATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHwstatus](ctx)
	},
	"HYGROMETER_SENSOR": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageHygrometerSensor](ctx)
	},
	"ICAROUS_HEARTBEAT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageIcarousHeartbeat](ctx)
	},
	"ICAROUS_KINEMATIC_BANDS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageIcarousKinematicBands](ctx)
	},
	"ILLUMINATOR_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageIlluminatorStatus](ctx)
	},
	"ISBD_LINK_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageIsbdLinkStatus](ctx)
	},
	"LANDING_TARGET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLandingTarget](ctx)
	},
	"LED_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLedControl](ctx)
	},
	"LIMITS_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLimitsStatus](ctx)
	},
	"LINK_NODE_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLinkNodeStatus](ctx)
	},
	"LOCAL_POSITION_NED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLocalPositionNed](ctx)
	},
	"LOCAL_POSITION_NED_COV": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLocalPositionNedCov](ctx)
	},
	"LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLocalPositionNedSystemGlobalOffset](ctx)
	},
	"LOGGING_ACK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLoggingAck](ctx)
	},
	"LOGGING_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLoggingData](ctx)
	},
	"LOGGING_DATA_ACKED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLoggingDataAcked](ctx)
	},
	"LOG_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLogData](ctx)
	},
	"LOG_ENTRY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLogEntry](ctx)
	},
	"LOG_ERASE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLogErase](ctx)
	},
	"LOG_REQUEST_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLogRequestData](ctx)
	},
	"LOG_REQUEST_END": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLogRequestEnd](ctx)
	},
	"LOG_REQUEST_LIST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLogRequestList](ctx)
	},
	"LOWEHEISER_GOV_EFI": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageLoweheiserGovEfi](ctx)
	},
	"MAG_CAL_PROGRESS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMagCalProgress](ctx)
	},
	"MAG_CAL_REPORT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMagCalReport](ctx)
	},
	"MANUAL_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageManualControl](ctx)
	},
	"MANUAL_SETPOINT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageManualSetpoint](ctx)
	},
	"MCU_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMcuStatus](ctx)
	},
	"MEMINFO": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMeminfo](ctx)
	},
	"MEMORY_VECT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMemoryVect](ctx)
	},
	"MESSAGE_INTERVAL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMessageInterval](ctx)
	},
	"MISSION_ACK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionAck](ctx)
	},
	"MISSION_CLEAR_ALL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionClearAll](ctx)
	},
	"MISSION_COUNT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionCount](ctx)
	},
	"MISSION_CURRENT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionCurrent](ctx)
	},
	"MISSION_ITEM": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionItem](ctx)
	},
	"MISSION_ITEM_INT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionItemInt](ctx)
	},
	"MISSION_ITEM_REACHED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionItemReached](ctx)
	},
	"MISSION_REQUEST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionRequest](ctx)
	},
	"MISSION_REQUEST_INT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionRequestInt](ctx)
	},
	"MISSION_REQUEST_LIST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionRequestList](ctx)
	},
	"MISSION_REQUEST_PARTIAL_LIST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionRequestPartialList](ctx)
	},
	"MISSION_SET_CURRENT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionSetCurrent](ctx)
	},
	"MISSION_WRITE_PARTIAL_LIST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMissionWritePartialList](ctx)
	},
	"MOUNT_CONFIGURE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMountConfigure](ctx)
	},
	"MOUNT_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMountControl](ctx)
	},
	"MOUNT_ORIENTATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMountOrientation](ctx)
	},
	"MOUNT_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageMountStatus](ctx)
	},
	"NAMED_VALUE_FLOAT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageNamedValueFloat](ctx)
	},
	"NAMED_VALUE_INT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageNamedValueInt](ctx)
	},
	"NAV_CONTROLLER_OUTPUT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageNavControllerOutput](ctx)
	},
	"NAV_FILTER_BIAS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageNavFilterBias](ctx)
	},
	"OBSTACLE_DISTANCE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageObstacleDistance](ctx)
	},
	"OBSTACLE_DISTANCE_3D": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageObstacleDistance_3d](ctx)
	},
	"ODOMETRY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOdometry](ctx)
	},
	"ONBOARD_COMPUTER_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOnboardComputerStatus](ctx)
	},
	"OPEN_DRONE_ID_ARM_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdArmStatus](ctx)
	},
	"OPEN_DRONE_ID_AUTHENTICATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdAuthentication](ctx)
	},
	"OPEN_DRONE_ID_BASIC_ID": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdBasicId](ctx)
	},
	"OPEN_DRONE_ID_LOCATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdLocation](ctx)
	},
	"OPEN_DRONE_ID_MESSAGE_PACK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdMessagePack](ctx)
	},
	"OPEN_DRONE_ID_OPERATOR_ID": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdOperatorId](ctx)
	},
	"OPEN_DRONE_ID_SELF_ID": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdSelfId](ctx)
	},
	"OPEN_DRONE_ID_SYSTEM": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdSystem](ctx)
	},
	"OPEN_DRONE_ID_SYSTEM_UPDATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpenDroneIdSystemUpdate](ctx)
	},
	"OPTICAL_FLOW": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpticalFlow](ctx)
	},
	"OPTICAL_FLOW_RAD": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOpticalFlowRad](ctx)
	},
	"ORBIT_EXECUTION_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOrbitExecutionStatus](ctx)
	},
	"OSD_PARAM_CONFIG": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOsdParamConfig](ctx)
	},
	"OSD_PARAM_CONFIG_REPLY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOsdParamConfigReply](ctx)
	},
	"OSD_PARAM_SHOW_CONFIG": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOsdParamShowConfig](ctx)
	},
	"OSD_PARAM_SHOW_CONFIG_REPLY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageOsdParamShowConfigReply](ctx)
	},
	"PARAM_EXT_ACK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamExtAck](ctx)
	},
	"PARAM_EXT_REQUEST_LIST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamExtRequestList](ctx)
	},
	"PARAM_EXT_REQUEST_READ": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamExtRequestRead](ctx)
	},
	"PARAM_EXT_SET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamExtSet](ctx)
	},
	"PARAM_EXT_VALUE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamExtValue](ctx)
	},
	"PARAM_MAP_RC": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamMapRc](ctx)
	},
	"PARAM_REQUEST_LIST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamRequestList](ctx)
	},
	"PARAM_REQUEST_READ": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamRequestRead](ctx)
	},
	"PARAM_SET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamSet](ctx)
	},
	"PARAM_VALUE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamValue](ctx)
	},
	"PARAM_VALUE_ARRAY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageParamValueArray](ctx)
	},
	"PID_TUNING": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessagePidTuning](ctx)
	},
	"PING": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessagePing](ctx)
	},
	"PLAY_TUNE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessagePlayTune](ctx)
	},
	"PLAY_TUNE_V2": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessagePlayTuneV2](ctx)
	},
	"POSITION_TARGET_GLOBAL_INT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessagePositionTargetGlobalInt](ctx)
	},
	"POSITION_TARGET_LOCAL_NED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessagePositionTargetLocalNed](ctx)
	},
	"POWER_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessagePowerStatus](ctx)
	},
	"PROTOCOL_VERSION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageProtocolVersion](ctx)
	},
	"QSHOT_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageQshotStatus](ctx)
	},
	"RADIO": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRadio](ctx)
	},
	"RADIO_CALIBRATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRadioCalibration](ctx)
	},
	"RADIO_RC_CHANNELS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRadioRcChannels](ctx)
	},
	"RADIO_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRadioStatus](ctx)
	},
	"RALLY_FETCH_POINT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRallyFetchPoint](ctx)
	},
	"RALLY_POINT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRallyPoint](ctx)
	},
	"RANGEFINDER": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRangefinder](ctx)
	},
	"RAW_IMU": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRawImu](ctx)
	},
	"RAW_PRESSURE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRawPressure](ctx)
	},
	"RAW_RPM": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRawRpm](ctx)
	},
	"RC_CHANNELS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRcChannels](ctx)
	},
	"RC_CHANNELS_OVERRIDE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRcChannelsOverride](ctx)
	},
	"RC_CHANNELS_RAW": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRcChannelsRaw](ctx)
	},
	"RC_CHANNELS_SCALED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRcChannelsScaled](ctx)
	},
	"REMOTE_LOG_BLOCK_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRemoteLogBlockStatus](ctx)
	},
	"REMOTE_LOG_DATA_BLOCK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRemoteLogDataBlock](ctx)
	},
	"REQUEST_DATA_STREAM": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRequestDataStream](ctx)
	},
	"REQUEST_EVENT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRequestEvent](ctx)
	},
	"RESOURCE_REQUEST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageResourceRequest](ctx)
	},
	"RESPONSE_EVENT_ERROR": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageResponseEventError](ctx)
	},
	"RPM": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageRpm](ctx)
	},
	"SAFETY_ALLOWED_AREA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSafetyAllowedArea](ctx)
	},
	"SAFETY_SET_ALLOWED_AREA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSafetySetAllowedArea](ctx)
	},
	"SATCOM_LINK_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSatcomLinkStatus](ctx)
	},
	"SCALED_IMU": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageScaledImu](ctx)
	},
	"SCALED_IMU2": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageScaledImu2](ctx)
	},
	"SCALED_IMU3": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageScaledImu3](ctx)
	},
	"SCALED_PRESSURE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageScaledPressure](ctx)
	},
	"SCALED_PRESSURE2": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageScaledPressure2](ctx)
	},
	"SCALED_PRESSURE3": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageScaledPressure3](ctx)
	},
	"SECURE_COMMAND": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSecureCommand](ctx)
	},
	"SECURE_COMMAND_REPLY": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSecureCommandReply](ctx)
	},
	"SENSORPOD_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSensorpodStatus](ctx)
	},
	"SENSOR_AIRFLOW_ANGLES": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSensorAirflowAngles](ctx)
	},
	"SENSOR_OFFSETS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSensorOffsets](ctx)
	},
	"SENS_ATMOS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSensAtmos](ctx)
	},
	"SENS_BATMON": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSensBatmon](ctx)
	},
	"SENS_MPPT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSensMppt](ctx)
	},
	"SENS_POWER": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSensPower](ctx)
	},
	"SENS_POWER_BOARD": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSensPowerBoard](ctx)
	},
	"SERIAL_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSerialControl](ctx)
	},
	"SERVO_OUTPUT_RAW": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageServoOutputRaw](ctx)
	},
	"SETUP_SIGNING": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetupSigning](ctx)
	},
	"SET_ACTUATOR_CONTROL_TARGET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetActuatorControlTarget](ctx)
	},
	"SET_ATTITUDE_TARGET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetAttitudeTarget](ctx)
	},
	"SET_GPS_GLOBAL_ORIGIN": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetGpsGlobalOrigin](ctx)
	},
	"SET_HOME_POSITION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetHomePosition](ctx)
	},
	"SET_MAG_OFFSETS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetMagOffsets](ctx)
	},
	"SET_MODE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetMode](ctx)
	},
	"SET_POSITION_TARGET_GLOBAL_INT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetPositionTargetGlobalInt](ctx)
	},
	"SET_POSITION_TARGET_LOCAL_NED": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetPositionTargetLocalNed](ctx)
	},
	"SET_VELOCITY_LIMITS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSetVelocityLimits](ctx)
	},
	"SIMSTATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSimstate](ctx)
	},
	"SIM_STATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSimState](ctx)
	},
	"SMART_BATTERY_INFO": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSmartBatteryInfo](ctx)
	},
	"STATUSTEXT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageStatustext](ctx)
	},
	"STORAGE_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageStorageInformation](ctx)
	},
	"STORM32_GIMBAL_MANAGER_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageStorm32GimbalManagerControl](ctx)
	},
	"STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageStorm32GimbalManagerControlPitchyaw](ctx)
	},
	"STORM32_GIMBAL_MANAGER_CORRECT_ROLL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageStorm32GimbalManagerCorrectRoll](ctx)
	},
	"STORM32_GIMBAL_MANAGER_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageStorm32GimbalManagerInformation](ctx)
	},
	"STORM32_GIMBAL_MANAGER_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageStorm32GimbalManagerStatus](ctx)
	},
	"SUPPORTED_TUNES": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSupportedTunes](ctx)
	},
	"SYSTEM_TIME": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSystemTime](ctx)
	},
	"SYS_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageSysStatus](ctx)
	},
	"TARGET_ABSOLUTE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTargetAbsolute](ctx)
	},
	"TARGET_RELATIVE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTargetRelative](ctx)
	},
	"TERRAIN_CHECK": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTerrainCheck](ctx)
	},
	"TERRAIN_DATA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTerrainData](ctx)
	},
	"TERRAIN_REPORT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTerrainReport](ctx)
	},
	"TERRAIN_REQUEST": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTerrainRequest](ctx)
	},
	"TEST_TYPES": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTestTypes](ctx)
	},
	"TIMESYNC": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTimesync](ctx)
	},
	"TIME_ESTIMATE_TO_TARGET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTimeEstimateToTarget](ctx)
	},
	"TRAJECTORY_REPRESENTATION_BEZIER": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTrajectoryRepresentationBezier](ctx)
	},
	"TRAJECTORY_REPRESENTATION_WAYPOINTS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTrajectoryRepresentationWaypoints](ctx)
	},
	"TUNNEL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageTunnel](ctx)
	},
	"UALBERTA_SYS_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUalbertaSysStatus](ctx)
	},
	"UAVCAN_NODE_INFO": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavcanNodeInfo](ctx)
	},
	"UAVCAN_NODE_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavcanNodeStatus](ctx)
	},
	"UAVIONIX_ADSB_GET": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavionixAdsbGet](ctx)
	},
	"UAVIONIX_ADSB_OUT_CFG": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavionixAdsbOutCfg](ctx)
	},
	"UAVIONIX_ADSB_OUT_CFG_FLIGHTID": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavionixAdsbOutCfgFlightid](ctx)
	},
	"UAVIONIX_ADSB_OUT_CFG_REGISTRATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavionixAdsbOutCfgRegistration](ctx)
	},
	"UAVIONIX_ADSB_OUT_CONTROL": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavionixAdsbOutControl](ctx)
	},
	"UAVIONIX_ADSB_OUT_DYNAMIC": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavionixAdsbOutDynamic](ctx)
	},
	"UAVIONIX_ADSB_OUT_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavionixAdsbOutStatus](ctx)
	},
	"UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUavionixAdsbTransceiverHealthReport](ctx)
	},
	"UTM_GLOBAL_POSITION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageUtmGlobalPosition](ctx)
	},
	"V2_EXTENSION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageV2Extension](ctx)
	},
	"VELOCITY_LIMITS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageVelocityLimits](ctx)
	},
	"VFR_HUD": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageVfrHud](ctx)
	},
	"VIBRATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageVibration](ctx)
	},
	"VICON_POSITION_ESTIMATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageViconPositionEstimate](ctx)
	},
	"VIDEO_STREAM_INFORMATION": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageVideoStreamInformation](ctx)
	},
	"VIDEO_STREAM_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageVideoStreamStatus](ctx)
	},
	"VISION_POSITION_DELTA": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageVisionPositionDelta](ctx)
	},
	"VISION_POSITION_ESTIMATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageVisionPositionEstimate](ctx)
	},
	"VISION_SPEED_ESTIMATE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageVisionSpeedEstimate](ctx)
	},
	"WATER_DEPTH": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageWaterDepth](ctx)
	},
	"WHEEL_DISTANCE": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageWheelDistance](ctx)
	},
	"WIFI_CONFIG_AP": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageWifiConfigAp](ctx)
	},
	"WINCH_STATUS": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageWinchStatus](ctx)
	},
	"WIND": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageWind](ctx)
	},
	"WIND_COV": func(ctx context.Context) cellularlog.Message {
		return NewMessage[*all.MessageWindCov](ctx)
	},
}

// Auto-generated ID to name mapping for reference
var messageIDToName = map[uint32]string{
	0:     "HEARTBEAT",                               // MessageHeartbeat
	1:     "SYS_STATUS",                              // MessageSysStatus
	2:     "SYSTEM_TIME",                             // MessageSystemTime
	4:     "PING",                                    // MessagePing
	5:     "CHANGE_OPERATOR_CONTROL",                 // MessageChangeOperatorControl
	6:     "CHANGE_OPERATOR_CONTROL_ACK",             // MessageChangeOperatorControlAck
	7:     "AUTH_KEY",                                // MessageAuthKey
	8:     "LINK_NODE_STATUS",                        // MessageLinkNodeStatus
	11:    "SET_MODE",                                // MessageSetMode
	20:    "PARAM_REQUEST_READ",                      // MessageParamRequestRead
	21:    "PARAM_REQUEST_LIST",                      // MessageParamRequestList
	22:    "PARAM_VALUE",                             // MessageParamValue
	23:    "PARAM_SET",                               // MessageParamSet
	24:    "GPS_RAW_INT",                             // MessageGpsRawInt
	25:    "GPS_STATUS",                              // MessageGpsStatus
	26:    "SCALED_IMU",                              // MessageScaledImu
	27:    "RAW_IMU",                                 // MessageRawImu
	28:    "RAW_PRESSURE",                            // MessageRawPressure
	29:    "SCALED_PRESSURE",                         // MessageScaledPressure
	30:    "ATTITUDE",                                // MessageAttitude
	31:    "ATTITUDE_QUATERNION",                     // MessageAttitudeQuaternion
	32:    "LOCAL_POSITION_NED",                      // MessageLocalPositionNed
	33:    "GLOBAL_POSITION_INT",                     // MessageGlobalPositionInt
	34:    "RC_CHANNELS_SCALED",                      // MessageRcChannelsScaled
	35:    "RC_CHANNELS_RAW",                         // MessageRcChannelsRaw
	36:    "SERVO_OUTPUT_RAW",                        // MessageServoOutputRaw
	37:    "MISSION_REQUEST_PARTIAL_LIST",            // MessageMissionRequestPartialList
	38:    "MISSION_WRITE_PARTIAL_LIST",              // MessageMissionWritePartialList
	39:    "MISSION_ITEM",                            // MessageMissionItem
	40:    "MISSION_REQUEST",                         // MessageMissionRequest
	41:    "MISSION_SET_CURRENT",                     // MessageMissionSetCurrent
	42:    "MISSION_CURRENT",                         // MessageMissionCurrent
	43:    "MISSION_REQUEST_LIST",                    // MessageMissionRequestList
	44:    "MISSION_COUNT",                           // MessageMissionCount
	45:    "MISSION_CLEAR_ALL",                       // MessageMissionClearAll
	46:    "MISSION_ITEM_REACHED",                    // MessageMissionItemReached
	47:    "MISSION_ACK",                             // MessageMissionAck
	48:    "SET_GPS_GLOBAL_ORIGIN",                   // MessageSetGpsGlobalOrigin
	49:    "GPS_GLOBAL_ORIGIN",                       // MessageGpsGlobalOrigin
	50:    "PARAM_MAP_RC",                            // MessageParamMapRc
	51:    "MISSION_REQUEST_INT",                     // MessageMissionRequestInt
	54:    "SAFETY_SET_ALLOWED_AREA",                 // MessageSafetySetAllowedArea
	55:    "SAFETY_ALLOWED_AREA",                     // MessageSafetyAllowedArea
	61:    "ATTITUDE_QUATERNION_COV",                 // MessageAttitudeQuaternionCov
	62:    "NAV_CONTROLLER_OUTPUT",                   // MessageNavControllerOutput
	63:    "GLOBAL_POSITION_INT_COV",                 // MessageGlobalPositionIntCov
	64:    "LOCAL_POSITION_NED_COV",                  // MessageLocalPositionNedCov
	65:    "RC_CHANNELS",                             // MessageRcChannels
	66:    "REQUEST_DATA_STREAM",                     // MessageRequestDataStream
	67:    "DATA_STREAM",                             // MessageDataStream
	69:    "MANUAL_CONTROL",                          // MessageManualControl
	70:    "RC_CHANNELS_OVERRIDE",                    // MessageRcChannelsOverride
	73:    "MISSION_ITEM_INT",                        // MessageMissionItemInt
	74:    "VFR_HUD",                                 // MessageVfrHud
	75:    "COMMAND_INT",                             // MessageCommandInt
	76:    "COMMAND_LONG",                            // MessageCommandLong
	77:    "COMMAND_ACK",                             // MessageCommandAck
	80:    "COMMAND_CANCEL",                          // MessageCommandCancel
	81:    "MANUAL_SETPOINT",                         // MessageManualSetpoint
	82:    "SET_ATTITUDE_TARGET",                     // MessageSetAttitudeTarget
	83:    "ATTITUDE_TARGET",                         // MessageAttitudeTarget
	84:    "SET_POSITION_TARGET_LOCAL_NED",           // MessageSetPositionTargetLocalNed
	85:    "POSITION_TARGET_LOCAL_NED",               // MessagePositionTargetLocalNed
	86:    "SET_POSITION_TARGET_GLOBAL_INT",          // MessageSetPositionTargetGlobalInt
	87:    "POSITION_TARGET_GLOBAL_INT",              // MessagePositionTargetGlobalInt
	89:    "LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET", // MessageLocalPositionNedSystemGlobalOffset
	90:    "HIL_STATE",                               // MessageHilState
	91:    "HIL_CONTROLS",                            // MessageHilControls
	92:    "HIL_RC_INPUTS_RAW",                       // MessageHilRcInputsRaw
	93:    "HIL_ACTUATOR_CONTROLS",                   // MessageHilActuatorControls
	100:   "OPTICAL_FLOW",                            // MessageOpticalFlow
	101:   "GLOBAL_VISION_POSITION_ESTIMATE",         // MessageGlobalVisionPositionEstimate
	102:   "VISION_POSITION_ESTIMATE",                // MessageVisionPositionEstimate
	103:   "VISION_SPEED_ESTIMATE",                   // MessageVisionSpeedEstimate
	104:   "VICON_POSITION_ESTIMATE",                 // MessageViconPositionEstimate
	105:   "HIGHRES_IMU",                             // MessageHighresImu
	106:   "OPTICAL_FLOW_RAD",                        // MessageOpticalFlowRad
	107:   "HIL_SENSOR",                              // MessageHilSensor
	108:   "SIM_STATE",                               // MessageSimState
	109:   "RADIO_STATUS",                            // MessageRadioStatus
	110:   "FILE_TRANSFER_PROTOCOL",                  // MessageFileTransferProtocol
	111:   "TIMESYNC",                                // MessageTimesync
	112:   "CAMERA_TRIGGER",                          // MessageCameraTrigger
	113:   "HIL_GPS",                                 // MessageHilGps
	114:   "HIL_OPTICAL_FLOW",                        // MessageHilOpticalFlow
	115:   "HIL_STATE_QUATERNION",                    // MessageHilStateQuaternion
	116:   "SCALED_IMU2",                             // MessageScaledImu2
	117:   "LOG_REQUEST_LIST",                        // MessageLogRequestList
	118:   "LOG_ENTRY",                               // MessageLogEntry
	119:   "LOG_REQUEST_DATA",                        // MessageLogRequestData
	120:   "LOG_DATA",                                // MessageLogData
	121:   "LOG_ERASE",                               // MessageLogErase
	122:   "LOG_REQUEST_END",                         // MessageLogRequestEnd
	123:   "GPS_INJECT_DATA",                         // MessageGpsInjectData
	124:   "GPS2_RAW",                                // MessageGps2Raw
	125:   "POWER_STATUS",                            // MessagePowerStatus
	126:   "SERIAL_CONTROL",                          // MessageSerialControl
	127:   "GPS_RTK",                                 // MessageGpsRtk
	128:   "GPS2_RTK",                                // MessageGps2Rtk
	129:   "SCALED_IMU3",                             // MessageScaledImu3
	130:   "DATA_TRANSMISSION_HANDSHAKE",             // MessageDataTransmissionHandshake
	131:   "ENCAPSULATED_DATA",                       // MessageEncapsulatedData
	132:   "DISTANCE_SENSOR",                         // MessageDistanceSensor
	133:   "TERRAIN_REQUEST",                         // MessageTerrainRequest
	134:   "TERRAIN_DATA",                            // MessageTerrainData
	135:   "TERRAIN_CHECK",                           // MessageTerrainCheck
	136:   "TERRAIN_REPORT",                          // MessageTerrainReport
	137:   "SCALED_PRESSURE2",                        // MessageScaledPressure2
	138:   "ATT_POS_MOCAP",                           // MessageAttPosMocap
	139:   "SET_ACTUATOR_CONTROL_TARGET",             // MessageSetActuatorControlTarget
	140:   "ACTUATOR_CONTROL_TARGET",                 // MessageActuatorControlTarget
	141:   "ALTITUDE",                                // MessageAltitude
	142:   "RESOURCE_REQUEST",                        // MessageResourceRequest
	143:   "SCALED_PRESSURE3",                        // MessageScaledPressure3
	144:   "FOLLOW_TARGET",                           // MessageFollowTarget
	146:   "CONTROL_SYSTEM_STATE",                    // MessageControlSystemState
	147:   "BATTERY_STATUS",                          // MessageBatteryStatus
	148:   "AUTOPILOT_VERSION",                       // MessageAutopilotVersion
	149:   "LANDING_TARGET",                          // MessageLandingTarget
	150:   "SENSOR_OFFSETS",                          // MessageSensorOffsets
	151:   "SET_MAG_OFFSETS",                         // MessageSetMagOffsets
	152:   "MEMINFO",                                 // MessageMeminfo
	153:   "AP_ADC",                                  // MessageApAdc
	154:   "DIGICAM_CONFIGURE",                       // MessageDigicamConfigure
	155:   "DIGICAM_CONTROL",                         // MessageDigicamControl
	156:   "MOUNT_CONFIGURE",                         // MessageMountConfigure
	157:   "MOUNT_CONTROL",                           // MessageMountControl
	158:   "MOUNT_STATUS",                            // MessageMountStatus
	160:   "FENCE_POINT",                             // MessageFencePoint
	161:   "FENCE_FETCH_POINT",                       // MessageFenceFetchPoint
	162:   "FENCE_STATUS",                            // MessageFenceStatus
	163:   "AHRS",                                    // MessageAhrs
	164:   "SIMSTATE",                                // MessageSimstate
	165:   "HWSTATUS",                                // MessageHwstatus
	166:   "RADIO",                                   // MessageRadio
	167:   "LIMITS_STATUS",                           // MessageLimitsStatus
	168:   "WIND",                                    // MessageWind
	169:   "DATA16",                                  // MessageData16
	170:   "DATA32",                                  // MessageData32
	171:   "DATA64",                                  // MessageData64
	172:   "DATA96",                                  // MessageData96
	173:   "RANGEFINDER",                             // MessageRangefinder
	174:   "AIRSPEED_AUTOCAL",                        // MessageAirspeedAutocal
	175:   "RALLY_POINT",                             // MessageRallyPoint
	176:   "RALLY_FETCH_POINT",                       // MessageRallyFetchPoint
	177:   "COMPASSMOT_STATUS",                       // MessageCompassmotStatus
	178:   "AHRS2",                                   // MessageAhrs2
	179:   "CAMERA_STATUS",                           // MessageCameraStatus
	180:   "CAMERA_FEEDBACK",                         // MessageCameraFeedback
	181:   "BATTERY2",                                // MessageBattery2
	182:   "AHRS3",                                   // MessageAhrs3
	183:   "AUTOPILOT_VERSION_REQUEST",               // MessageAutopilotVersionRequest
	184:   "REMOTE_LOG_DATA_BLOCK",                   // MessageRemoteLogDataBlock
	185:   "REMOTE_LOG_BLOCK_STATUS",                 // MessageRemoteLogBlockStatus
	186:   "LED_CONTROL",                             // MessageLedControl
	191:   "MAG_CAL_PROGRESS",                        // MessageMagCalProgress
	192:   "MAG_CAL_REPORT",                          // MessageMagCalReport
	193:   "EKF_STATUS_REPORT",                       // MessageEkfStatusReport
	194:   "PID_TUNING",                              // MessagePidTuning
	195:   "DEEPSTALL",                               // MessageDeepstall
	200:   "GIMBAL_REPORT",                           // MessageGimbalReport
	201:   "GIMBAL_CONTROL",                          // MessageGimbalControl
	214:   "GIMBAL_TORQUE_CMD_REPORT",                // MessageGimbalTorqueCmdReport
	215:   "GOPRO_HEARTBEAT",                         // MessageGoproHeartbeat
	216:   "GOPRO_GET_REQUEST",                       // MessageGoproGetRequest
	217:   "GOPRO_GET_RESPONSE",                      // MessageGoproGetResponse
	218:   "GOPRO_SET_REQUEST",                       // MessageGoproSetRequest
	219:   "GOPRO_SET_RESPONSE",                      // MessageGoproSetResponse
	220:   "NAV_FILTER_BIAS",                         // MessageNavFilterBias
	221:   "RADIO_CALIBRATION",                       // MessageRadioCalibration
	222:   "UALBERTA_SYS_STATUS",                     // MessageUalbertaSysStatus
	223:   "COMMAND_INT_STAMPED",                     // MessageCommandIntStamped
	224:   "COMMAND_LONG_STAMPED",                    // MessageCommandLongStamped
	225:   "EFI_STATUS",                              // MessageEfiStatus
	226:   "RPM",                                     // MessageRpm
	230:   "ESTIMATOR_STATUS",                        // MessageEstimatorStatus
	231:   "WIND_COV",                                // MessageWindCov
	232:   "GPS_INPUT",                               // MessageGpsInput
	233:   "GPS_RTCM_DATA",                           // MessageGpsRtcmData
	234:   "HIGH_LATENCY",                            // MessageHighLatency
	235:   "HIGH_LATENCY2",                           // MessageHighLatency2
	241:   "VIBRATION",                               // MessageVibration
	242:   "HOME_POSITION",                           // MessageHomePosition
	243:   "SET_HOME_POSITION",                       // MessageSetHomePosition
	244:   "MESSAGE_INTERVAL",                        // MessageMessageInterval
	245:   "EXTENDED_SYS_STATE",                      // MessageExtendedSysState
	246:   "ADSB_VEHICLE",                            // MessageAdsbVehicle
	247:   "COLLISION",                               // MessageCollision
	248:   "V2_EXTENSION",                            // MessageV2Extension
	249:   "MEMORY_VECT",                             // MessageMemoryVect
	250:   "DEBUG_VECT",                              // MessageDebugVect
	251:   "NAMED_VALUE_FLOAT",                       // MessageNamedValueFloat
	252:   "NAMED_VALUE_INT",                         // MessageNamedValueInt
	253:   "STATUSTEXT",                              // MessageStatustext
	254:   "DEBUG",                                   // MessageDebug
	256:   "SETUP_SIGNING",                           // MessageSetupSigning
	257:   "BUTTON_CHANGE",                           // MessageButtonChange
	258:   "PLAY_TUNE",                               // MessagePlayTune
	259:   "CAMERA_INFORMATION",                      // MessageCameraInformation
	260:   "CAMERA_SETTINGS",                         // MessageCameraSettings
	261:   "STORAGE_INFORMATION",                     // MessageStorageInformation
	262:   "CAMERA_CAPTURE_STATUS",                   // MessageCameraCaptureStatus
	263:   "CAMERA_IMAGE_CAPTURED",                   // MessageCameraImageCaptured
	264:   "FLIGHT_INFORMATION",                      // MessageFlightInformation
	265:   "MOUNT_ORIENTATION",                       // MessageMountOrientation
	266:   "LOGGING_DATA",                            // MessageLoggingData
	267:   "LOGGING_DATA_ACKED",                      // MessageLoggingDataAcked
	268:   "LOGGING_ACK",                             // MessageLoggingAck
	269:   "VIDEO_STREAM_INFORMATION",                // MessageVideoStreamInformation
	270:   "VIDEO_STREAM_STATUS",                     // MessageVideoStreamStatus
	271:   "CAMERA_FOV_STATUS",                       // MessageCameraFovStatus
	275:   "CAMERA_TRACKING_IMAGE_STATUS",            // MessageCameraTrackingImageStatus
	276:   "CAMERA_TRACKING_GEO_STATUS",              // MessageCameraTrackingGeoStatus
	277:   "CAMERA_THERMAL_RANGE",                    // MessageCameraThermalRange
	280:   "GIMBAL_MANAGER_INFORMATION",              // MessageGimbalManagerInformation
	281:   "GIMBAL_MANAGER_STATUS",                   // MessageGimbalManagerStatus
	282:   "GIMBAL_MANAGER_SET_ATTITUDE",             // MessageGimbalManagerSetAttitude
	283:   "GIMBAL_DEVICE_INFORMATION",               // MessageGimbalDeviceInformation
	284:   "GIMBAL_DEVICE_SET_ATTITUDE",              // MessageGimbalDeviceSetAttitude
	285:   "GIMBAL_DEVICE_ATTITUDE_STATUS",           // MessageGimbalDeviceAttitudeStatus
	286:   "AUTOPILOT_STATE_FOR_GIMBAL_DEVICE",       // MessageAutopilotStateForGimbalDevice
	287:   "GIMBAL_MANAGER_SET_PITCHYAW",             // MessageGimbalManagerSetPitchyaw
	288:   "GIMBAL_MANAGER_SET_MANUAL_CONTROL",       // MessageGimbalManagerSetManualControl
	290:   "ESC_INFO",                                // MessageEscInfo
	291:   "ESC_STATUS",                              // MessageEscStatus
	295:   "AIRSPEED",                                // MessageAirspeed
	299:   "WIFI_CONFIG_AP",                          // MessageWifiConfigAp
	300:   "PROTOCOL_VERSION",                        // MessageProtocolVersion
	301:   "AIS_VESSEL",                              // MessageAisVessel
	310:   "UAVCAN_NODE_STATUS",                      // MessageUavcanNodeStatus
	311:   "UAVCAN_NODE_INFO",                        // MessageUavcanNodeInfo
	320:   "PARAM_EXT_REQUEST_READ",                  // MessageParamExtRequestRead
	321:   "PARAM_EXT_REQUEST_LIST",                  // MessageParamExtRequestList
	322:   "PARAM_EXT_VALUE",                         // MessageParamExtValue
	323:   "PARAM_EXT_SET",                           // MessageParamExtSet
	324:   "PARAM_EXT_ACK",                           // MessageParamExtAck
	330:   "OBSTACLE_DISTANCE",                       // MessageObstacleDistance
	331:   "ODOMETRY",                                // MessageOdometry
	332:   "TRAJECTORY_REPRESENTATION_WAYPOINTS",     // MessageTrajectoryRepresentationWaypoints
	333:   "TRAJECTORY_REPRESENTATION_BEZIER",        // MessageTrajectoryRepresentationBezier
	334:   "CELLULAR_STATUS",                         // MessageCellularStatus
	335:   "ISBD_LINK_STATUS",                        // MessageIsbdLinkStatus
	336:   "CELLULAR_CONFIG",                         // MessageCellularConfig
	339:   "RAW_RPM",                                 // MessageRawRpm
	340:   "UTM_GLOBAL_POSITION",                     // MessageUtmGlobalPosition
	350:   "DEBUG_FLOAT_ARRAY",                       // MessageDebugFloatArray
	354:   "SET_VELOCITY_LIMITS",                     // MessageSetVelocityLimits
	355:   "VELOCITY_LIMITS",                         // MessageVelocityLimits
	360:   "ORBIT_EXECUTION_STATUS",                  // MessageOrbitExecutionStatus
	361:   "FIGURE_EIGHT_EXECUTION_STATUS",           // MessageFigureEightExecutionStatus
	369:   "BATTERY_STATUS_V2",                       // MessageBatteryStatusV2
	370:   "SMART_BATTERY_INFO",                      // MessageSmartBatteryInfo
	371:   "FUEL_STATUS",                             // MessageFuelStatus
	372:   "BATTERY_INFO",                            // MessageBatteryInfo
	373:   "GENERATOR_STATUS",                        // MessageGeneratorStatus
	375:   "ACTUATOR_OUTPUT_STATUS",                  // MessageActuatorOutputStatus
	380:   "TIME_ESTIMATE_TO_TARGET",                 // MessageTimeEstimateToTarget
	385:   "TUNNEL",                                  // MessageTunnel
	386:   "CAN_FRAME",                               // MessageCanFrame
	387:   "CANFD_FRAME",                             // MessageCanfdFrame
	388:   "CAN_FILTER_MODIFY",                       // MessageCanFilterModify
	390:   "ONBOARD_COMPUTER_STATUS",                 // MessageOnboardComputerStatus
	395:   "COMPONENT_INFORMATION",                   // MessageComponentInformation
	396:   "COMPONENT_INFORMATION_BASIC",             // MessageComponentInformationBasic
	397:   "COMPONENT_METADATA",                      // MessageComponentMetadata
	400:   "PLAY_TUNE_V2",                            // MessagePlayTuneV2
	401:   "SUPPORTED_TUNES",                         // MessageSupportedTunes
	410:   "EVENT",                                   // MessageEvent
	411:   "CURRENT_EVENT_SEQUENCE",                  // MessageCurrentEventSequence
	412:   "REQUEST_EVENT",                           // MessageRequestEvent
	413:   "RESPONSE_EVENT_ERROR",                    // MessageResponseEventError
	414:   "GROUP_START",                             // MessageGroupStart
	415:   "GROUP_END",                               // MessageGroupEnd
	420:   "RADIO_RC_CHANNELS",                       // MessageRadioRcChannels
	435:   "AVAILABLE_MODES",                         // MessageAvailableModes
	436:   "CURRENT_MODE",                            // MessageCurrentMode
	437:   "AVAILABLE_MODES_MONITOR",                 // MessageAvailableModesMonitor
	440:   "ILLUMINATOR_STATUS",                      // MessageIlluminatorStatus
	441:   "GNSS_INTEGRITY",                          // MessageGnssIntegrity
	510:   "TARGET_ABSOLUTE",                         // MessageTargetAbsolute
	511:   "TARGET_RELATIVE",                         // MessageTargetRelative
	512:   "CONTROL_STATUS",                          // MessageControlStatus
	8002:  "SENS_POWER",                              // MessageSensPower
	8003:  "SENS_MPPT",                               // MessageSensMppt
	8004:  "ASLCTRL_DATA",                            // MessageAslctrlData
	8005:  "ASLCTRL_DEBUG",                           // MessageAslctrlDebug
	8006:  "ASLUAV_STATUS",                           // MessageAsluavStatus
	8007:  "EKF_EXT",                                 // MessageEkfExt
	8008:  "ASL_OBCTRL",                              // MessageAslObctrl
	8009:  "SENS_ATMOS",                              // MessageSensAtmos
	8010:  "SENS_BATMON",                             // MessageSensBatmon
	8011:  "FW_SOARING_DATA",                         // MessageFwSoaringData
	8012:  "SENSORPOD_STATUS",                        // MessageSensorpodStatus
	8013:  "SENS_POWER_BOARD",                        // MessageSensPowerBoard
	8014:  "GSM_LINK_STATUS",                         // MessageGsmLinkStatus
	8015:  "SATCOM_LINK_STATUS",                      // MessageSatcomLinkStatus
	8016:  "SENSOR_AIRFLOW_ANGLES",                   // MessageSensorAirflowAngles
	9000:  "WHEEL_DISTANCE",                          // MessageWheelDistance
	9005:  "WINCH_STATUS",                            // MessageWinchStatus
	10001: "UAVIONIX_ADSB_OUT_CFG",                   // MessageUavionixAdsbOutCfg
	10002: "UAVIONIX_ADSB_OUT_DYNAMIC",               // MessageUavionixAdsbOutDynamic
	10003: "UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT", // MessageUavionixAdsbTransceiverHealthReport
	10004: "UAVIONIX_ADSB_OUT_CFG_REGISTRATION",      // MessageUavionixAdsbOutCfgRegistration
	10005: "UAVIONIX_ADSB_OUT_CFG_FLIGHTID",          // MessageUavionixAdsbOutCfgFlightid
	10006: "UAVIONIX_ADSB_GET",                       // MessageUavionixAdsbGet
	10007: "UAVIONIX_ADSB_OUT_CONTROL",               // MessageUavionixAdsbOutControl
	10008: "UAVIONIX_ADSB_OUT_STATUS",                // MessageUavionixAdsbOutStatus
	10151: "LOWEHEISER_GOV_EFI",                      // MessageLoweheiserGovEfi
	11000: "DEVICE_OP_READ",                          // MessageDeviceOpRead
	11001: "DEVICE_OP_READ_REPLY",                    // MessageDeviceOpReadReply
	11002: "DEVICE_OP_WRITE",                         // MessageDeviceOpWrite
	11003: "DEVICE_OP_WRITE_REPLY",                   // MessageDeviceOpWriteReply
	11004: "SECURE_COMMAND",                          // MessageSecureCommand
	11005: "SECURE_COMMAND_REPLY",                    // MessageSecureCommandReply
	11010: "ADAP_TUNING",                             // MessageAdapTuning
	11011: "VISION_POSITION_DELTA",                   // MessageVisionPositionDelta
	11020: "AOA_SSA",                                 // MessageAoaSsa
	11030: "ESC_TELEMETRY_1_TO_4",                    // MessageEscTelemetry_1To_4
	11031: "ESC_TELEMETRY_5_TO_8",                    // MessageEscTelemetry_5To_8
	11032: "ESC_TELEMETRY_9_TO_12",                   // MessageEscTelemetry_9To_12
	11033: "OSD_PARAM_CONFIG",                        // MessageOsdParamConfig
	11034: "OSD_PARAM_CONFIG_REPLY",                  // MessageOsdParamConfigReply
	11035: "OSD_PARAM_SHOW_CONFIG",                   // MessageOsdParamShowConfig
	11036: "OSD_PARAM_SHOW_CONFIG_REPLY",             // MessageOsdParamShowConfigReply
	11037: "OBSTACLE_DISTANCE_3D",                    // MessageObstacleDistance_3d
	11038: "WATER_DEPTH",                             // MessageWaterDepth
	11039: "MCU_STATUS",                              // MessageMcuStatus
	11040: "ESC_TELEMETRY_13_TO_16",                  // MessageEscTelemetry_13To_16
	11041: "ESC_TELEMETRY_17_TO_20",                  // MessageEscTelemetry_17To_20
	11042: "ESC_TELEMETRY_21_TO_24",                  // MessageEscTelemetry_21To_24
	11043: "ESC_TELEMETRY_25_TO_28",                  // MessageEscTelemetry_25To_28
	11044: "ESC_TELEMETRY_29_TO_32",                  // MessageEscTelemetry_29To_32
	12900: "OPEN_DRONE_ID_BASIC_ID",                  // MessageOpenDroneIdBasicId
	12901: "OPEN_DRONE_ID_LOCATION",                  // MessageOpenDroneIdLocation
	12902: "OPEN_DRONE_ID_AUTHENTICATION",            // MessageOpenDroneIdAuthentication
	12903: "OPEN_DRONE_ID_SELF_ID",                   // MessageOpenDroneIdSelfId
	12904: "OPEN_DRONE_ID_SYSTEM",                    // MessageOpenDroneIdSystem
	12905: "OPEN_DRONE_ID_OPERATOR_ID",               // MessageOpenDroneIdOperatorId
	12915: "OPEN_DRONE_ID_MESSAGE_PACK",              // MessageOpenDroneIdMessagePack
	12918: "OPEN_DRONE_ID_ARM_STATUS",                // MessageOpenDroneIdArmStatus
	12919: "OPEN_DRONE_ID_SYSTEM_UPDATE",             // MessageOpenDroneIdSystemUpdate
	12920: "HYGROMETER_SENSOR",                       // MessageHygrometerSensor
	17000: "TEST_TYPES",                              // MessageTestTypes
	17150: "ARRAY_TEST_0",                            // MessageArrayTest_0
	17151: "ARRAY_TEST_1",                            // MessageArrayTest_1
	17153: "ARRAY_TEST_3",                            // MessageArrayTest_3
	17154: "ARRAY_TEST_4",                            // MessageArrayTest_4
	17155: "ARRAY_TEST_5",                            // MessageArrayTest_5
	17156: "ARRAY_TEST_6",                            // MessageArrayTest_6
	17157: "ARRAY_TEST_7",                            // MessageArrayTest_7
	17158: "ARRAY_TEST_8",                            // MessageArrayTest_8
	42000: "ICAROUS_HEARTBEAT",                       // MessageIcarousHeartbeat
	42001: "ICAROUS_KINEMATIC_BANDS",                 // MessageIcarousKinematicBands
	50001: "CUBEPILOT_RAW_RC",                        // MessageCubepilotRawRc
	50002: "HERELINK_VIDEO_STREAM_INFORMATION",       // MessageHerelinkVideoStreamInformation
	50003: "HERELINK_TELEM",                          // MessageHerelinkTelem
	50004: "CUBEPILOT_FIRMWARE_UPDATE_START",         // MessageCubepilotFirmwareUpdateStart
	50005: "CUBEPILOT_FIRMWARE_UPDATE_RESP",          // MessageCubepilotFirmwareUpdateResp
	52000: "AIRLINK_AUTH",                            // MessageAirlinkAuth
	52001: "AIRLINK_AUTH_RESPONSE",                   // MessageAirlinkAuthResponse
	52002: "AIRLINK_EYE_GS_HOLE_PUSH_REQUEST",        // MessageAirlinkEyeGsHolePushRequest
	52003: "AIRLINK_EYE_GS_HOLE_PUSH_RESPONSE",       // MessageAirlinkEyeGsHolePushResponse
	52004: "AIRLINK_EYE_HP",                          // MessageAirlinkEyeHp
	52005: "AIRLINK_EYE_TURN_INIT",                   // MessageAirlinkEyeTurnInit
	60010: "STORM32_GIMBAL_MANAGER_INFORMATION",      // MessageStorm32GimbalManagerInformation
	60011: "STORM32_GIMBAL_MANAGER_STATUS",           // MessageStorm32GimbalManagerStatus
	60012: "STORM32_GIMBAL_MANAGER_CONTROL",          // MessageStorm32GimbalManagerControl
	60013: "STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW", // MessageStorm32GimbalManagerControlPitchyaw
	60014: "STORM32_GIMBAL_MANAGER_CORRECT_ROLL",     // MessageStorm32GimbalManagerCorrectRoll
	60020: "QSHOT_STATUS",                            // MessageQshotStatus
	60040: "FRSKY_PASSTHROUGH_ARRAY",                 // MessageFrskyPassthroughArray
	60041: "PARAM_VALUE_ARRAY",                       // MessageParamValueArray
	60050: "AVSS_PRS_SYS_STATUS",                     // MessageAvssPrsSysStatus
	60051: "AVSS_DRONE_POSITION",                     // MessageAvssDronePosition
	60052: "AVSS_DRONE_IMU",                          // MessageAvssDroneImu
	60053: "AVSS_DRONE_OPERATION_MODE",               // MessageAvssDroneOperationMode
}

// CreateMAVLinkMessageByID Auto-generated function to create message by ID
func CreateMAVLinkMessageByID(id uint32, ctx context.Context) (cellularlog.Message, error) {
	name, exists := messageIDToName[id]
	if !exists {
		return nil, fmt.Errorf("unsupported message ID: %d", id)
	}

	factory, exists := mavlinkRegistry[name]
	if !exists {
		return nil, fmt.Errorf("message %s (ID: %d) not implemented in registry", name, id)
	}

	return factory(ctx), nil
}
